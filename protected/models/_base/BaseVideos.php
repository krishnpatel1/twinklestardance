<?php

/**
 * This is the model base class for the table "videos".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Videos".
 *
 * Columns in table "videos" available as properties of the model,
 * followed by relations of table "videos" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property double $price
 * @property string $image_url
 * @property string $iframe_code
 * @property integer $status
 * @property string $created_at
 * @property string $updated_at
 *
 * @property Classes[] $classes
 * @property SubscriptionVideoTransaction[] $subscriptionVideoTransactions
 * @property UserUpdatedVideos[] $userUpdatedVideoses
 * @property UserVideosTransaction[] $userVideosTransactions
 */
abstract class BaseVideos extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'videos';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Videos|Videoses', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('status', 'numerical', 'integerOnly'=>true),
			array('price', 'numerical'),
			array('title, image_url', 'length', 'max'=>255),
			array('description, iframe_code, created_at, updated_at', 'safe'),
			array('title, description, price, image_url, iframe_code, status, created_at, updated_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, title, description, price, image_url, iframe_code, status, created_at, updated_at, genre', 'safe', 'on' => 'search'),
		);
	}

	public function relations() {
		return array(
			'classes' => array(self::MANY_MANY, 'Classes', 'class_videos(video_id, class_id)'),
			'subscriptionVideoTransactions' => array(self::HAS_MANY, 'SubscriptionVideoTransaction', 'video_id'),
			'userUpdatedVideoses' => array(self::HAS_MANY, 'UserUpdatedVideos', 'video_id'),
			'userVideosTransactions' => array(self::HAS_MANY, 'UserVideosTransaction', 'video_id'),
            'genreRel'=>array(self::BELONGS_TO, 'Genre', 'genre'),
            'categoryRel'=>array(self::BELONGS_TO, 'Category', 'category'),
            'agerangeRel'=>array(self::BELONGS_TO, 'Agerange', 'age_range'),
		);
	}

	public function pivotModels() {
		return array(
			'classes' => 'ClassVideos',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => Yii::t('app', 'Title'),
			'description' => Yii::t('app', 'Description'),
			'price' => Yii::t('app', 'Price'),
			'image_url' => Yii::t('app', 'Image Url'),
			'iframe_code' => Yii::t('app', 'Iframe Code'),
			'status' => Yii::t('app', 'Status'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'classes' => null,
			'subscriptionVideoTransactions' => null,
			'userUpdatedVideoses' => null,
			'userVideosTransactions' => null,
            'genre' => Yii::t('app', 'Genres'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
        
        //$criteria->select = "t.*, user.name";
        //$criteria->join = "JOIN user ON user.id = t.user_id";
        $criteria->with = array( 'genreRel' );
		
        $criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('price', $this->price);
		$criteria->compare('image_url', $this->image_url, true);
		$criteria->compare('iframe_code', $this->iframe_code, true);
		$criteria->compare('status', $this->status);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
        $criteria->compare('genre', $this->genre);
        //$criteria->compare('genre.name', $this->genre_disp, true );
        $criteria->compare('age_range', $this->age_range);
        $criteria->compare('category', $this->category);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}