<?php

/**
 * This is the model base class for the table "package_subscription_documents_transaction".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PackageSubscriptionDocumentsTransaction".
 *
 * Columns in table "package_subscription_documents_transaction" available as properties of the model,
 * followed by relations of table "package_subscription_documents_transaction" available as properties of the model.
 *
 * @property integer $id
 * @property integer $document_id
 * @property integer $subscription_id
 *
 * @property PackageSubscriptionDocuments $document
 * @property PackageSubscription $subscription
 */
abstract class BasePackageSubscriptionDocumentsTransaction extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'package_subscription_documents_transaction';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'PackageSubscriptionDocumentsTransaction|PackageSubscriptionDocumentsTransactions', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('document_id, subscription_id', 'numerical', 'integerOnly'=>true),
			array('document_id, subscription_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, document_id, subscription_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'document' => array(self::BELONGS_TO, 'PackageSubscriptionDocuments', 'document_id'),
			'subscription' => array(self::BELONGS_TO, 'PackageSubscription', 'subscription_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'document_id' => null,
			'subscription_id' => null,
			'document' => null,
			'subscription' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('document_id', $this->document_id);
		$criteria->compare('subscription_id', $this->subscription_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}