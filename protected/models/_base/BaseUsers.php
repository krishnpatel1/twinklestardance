<?php

/**
 * This is the model base class for the table "users".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Users".
 *
 * Columns in table "users" available as properties of the model,
 * followed by relations of table "users" available as properties of the model.
 *
 * @property integer $id
 * @property integer $parent_id
 * @property string $role_id
 * @property string $username
 * @property string $email
 * @property string $contact_email
 * @property string $other_email
 * @property string $password
 * @property integer $user_type
 * @property string $first_name
 * @property string $middle_name
 * @property string $last_name
 * @property string $studio_name
 * @property string $gender
 * @property string $picture
 * @property string $address_1
 * @property string $address_2
 * @property string $mobile
 * @property string $phone
 * @property string $city
 * @property integer $state_id
 * @property integer $country_id
 * @property string $zip
 *
 * @property Classes[] $classes
 * @property Classes[] $classes1
 * @property Classes[] $classes2
 * @property MstPages[] $mstPages
 * @property MstPages[] $mstPages1
 * @property Orders[] $orders
 * @property UserAvailableUpdateVideoRemove[] $userAvailableUpdateVideoRemoves
 * @property UserUpdatedVideos[] $userUpdatedVideoses
 * @property UserVideosTransaction[] $userVideosTransactions
 * @property UserRole $role
 * @property StateMaster $state
 * @property CountryMaster $country
 */
abstract class BaseUsers extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'users';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Users|Users', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, email, password', 'required'),
			array('parent_id, user_type, state_id, country_id', 'numerical', 'integerOnly'=>true),
			array('role_id', 'length', 'max'=>10),
			array('username, email, contact_email, other_email, password, first_name, middle_name, last_name, studio_name, picture, mobile, phone, city, zip', 'length', 'max'=>255),
			array('gender', 'length', 'max'=>6),
			array('address_1, address_2', 'safe'),
			array('parent_id, role_id, contact_email, other_email, user_type, first_name, middle_name, last_name, studio_name, gender, picture, address_1, address_2, mobile, phone, city, state_id, country_id, zip', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, parent_id, role_id, username, email, contact_email, other_email, password, user_type, first_name, middle_name, last_name, studio_name, gender, picture, address_1, address_2, mobile, phone, city, state_id, country_id, zip', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'classes' => array(self::MANY_MANY, 'Classes', 'class_users(user_id, class_id)'),
			'classes1' => array(self::HAS_MANY, 'Classes', 'created_by'),
			'classes2' => array(self::HAS_MANY, 'Classes', 'updated_by'),
			'mstPages' => array(self::HAS_MANY, 'MstPages', 'created_user_id'),
			'mstPages1' => array(self::HAS_MANY, 'MstPages', 'updated_user_id'),
			'orders' => array(self::HAS_MANY, 'Orders', 'user_id'),
			'userAvailableUpdateVideoRemoves' => array(self::HAS_MANY, 'UserAvailableUpdateVideoRemove', 'user_id'),
			'userUpdatedVideoses' => array(self::HAS_MANY, 'UserUpdatedVideos', 'user_id'),
			'userVideosTransactions' => array(self::HAS_MANY, 'UserVideosTransaction', 'user_id'),
			'role' => array(self::BELONGS_TO, 'UserRole', 'role_id'),
			'state' => array(self::BELONGS_TO, 'StateMaster', 'state_id'),
			'country' => array(self::BELONGS_TO, 'CountryMaster', 'country_id'),
		);
	}

	public function pivotModels() {
		return array(
			'classes' => 'ClassUsers',
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'parent_id' => Yii::t('app', 'Parent'),
			'role_id' => null,
			'username' => Yii::t('app', 'Username'),
			'email' => Yii::t('app', 'Email'),
			'contact_email' => Yii::t('app', 'Contact Email'),
			'other_email' => Yii::t('app', 'Other Email'),
			'password' => Yii::t('app', 'Password'),
			'user_type' => Yii::t('app', 'User Type'),
			'first_name' => Yii::t('app', 'First Name'),
			'middle_name' => Yii::t('app', 'Middle Name'),
			'last_name' => Yii::t('app', 'Last Name'),
			'studio_name' => Yii::t('app', 'Studio Name'),
			'gender' => Yii::t('app', 'Gender'),
			'picture' => Yii::t('app', 'Picture'),
			'address_1' => Yii::t('app', 'Address 1'),
			'address_2' => Yii::t('app', 'Address 2'),
			'mobile' => Yii::t('app', 'Mobile'),
			'phone' => Yii::t('app', 'Phone'),
			'city' => Yii::t('app', 'City'),
			'state_id' => null,
			'country_id' => null,
			'zip' => Yii::t('app', 'Zip'),
			'classes' => null,
			'classes1' => null,
			'classes2' => null,
			'mstPages' => null,
			'mstPages1' => null,
			'orders' => null,
			'userAvailableUpdateVideoRemoves' => null,
			'userUpdatedVideoses' => null,
			'userVideosTransactions' => null,
			'role' => null,
			'state' => null,
			'country' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('parent_id', $this->parent_id);
		$criteria->compare('role_id', $this->role_id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('contact_email', $this->contact_email, true);
		$criteria->compare('other_email', $this->other_email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('user_type', $this->user_type);
		$criteria->compare('first_name', $this->first_name, true);
		$criteria->compare('middle_name', $this->middle_name, true);
		$criteria->compare('last_name', $this->last_name, true);
		$criteria->compare('studio_name', $this->studio_name, true);
		$criteria->compare('gender', $this->gender, true);
		$criteria->compare('picture', $this->picture, true);
		$criteria->compare('address_1', $this->address_1, true);
		$criteria->compare('address_2', $this->address_2, true);
		$criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('state_id', $this->state_id);
		$criteria->compare('country_id', $this->country_id);
		$criteria->compare('zip', $this->zip, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}