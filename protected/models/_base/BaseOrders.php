<?php

/**
 * This is the model base class for the table "orders".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Orders".
 *
 * Columns in table "orders" available as properties of the model,
 * followed by relations of table "orders" available as properties of the model.
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $payment_status
 * @property double $sub_total
 * @property double $tax
 * @property double $amount_paid
 * @property double $shipping
 * @property string $payment_date
 * @property string $recurring_profile_id
 * @property integer $payment_type
 * @property string $notes
 * @property string $payment_error_message
 *
 * @property OrderDetails[] $orderDetails
 * @property Users $user
 * @property UserVideosTransaction[] $userVideosTransactions
 */
abstract class BaseOrders extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'orders';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Orders|Orders', $n);
	}

	public static function representingColumn() {
		return 'payment_date';
	}

	public function rules() {
		return array(
			array('user_id, payment_status, payment_type', 'numerical', 'integerOnly'=>true),
			array('sub_total, tax, amount_paid, shipping', 'numerical'),
			array('recurring_profile_id, notes', 'length', 'max'=>255),
			array('payment_date, payment_error_message', 'safe'),
			array('user_id, payment_status, sub_total, tax, amount_paid, shipping, payment_date, recurring_profile_id, payment_type, notes, payment_error_message', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, user_id, payment_status, sub_total, tax, amount_paid, shipping, payment_date, recurring_profile_id, payment_type, notes, payment_error_message', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'orderDetails' => array(self::HAS_MANY, 'OrderDetails', 'order_id'),
			'user' => array(self::BELONGS_TO, 'Users', 'user_id'),
			'userVideosTransactions' => array(self::HAS_MANY, 'UserVideosTransaction', 'order_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => null,
			'payment_status' => Yii::t('app', 'Payment Status'),
			'sub_total' => Yii::t('app', 'Sub Total'),
			'tax' => Yii::t('app', 'Tax'),
			'amount_paid' => Yii::t('app', 'Amount Paid'),
			'shipping' => Yii::t('app', 'Shipping'),
			'payment_date' => Yii::t('app', 'Payment Date'),
			'recurring_profile_id' => Yii::t('app', 'Recurring Profile'),
			'payment_type' => Yii::t('app', 'Payment Type'),
			'notes' => Yii::t('app', 'Notes'),
			'payment_error_message' => Yii::t('app', 'Payment Error Message'),
			'orderDetails' => null,
			'user' => null,
			'userVideosTransactions' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('payment_status', $this->payment_status);
		$criteria->compare('sub_total', $this->sub_total);
		$criteria->compare('tax', $this->tax);
		$criteria->compare('amount_paid', $this->amount_paid);
		$criteria->compare('shipping', $this->shipping);
		$criteria->compare('payment_date', $this->payment_date, true);
		$criteria->compare('recurring_profile_id', $this->recurring_profile_id, true);
		$criteria->compare('payment_type', $this->payment_type);
		$criteria->compare('notes', $this->notes, true);
		$criteria->compare('payment_error_message', $this->payment_error_message, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}